#!/bin/bash -e

set -e

export MARIADB_JOB_DIR=/var/vcap/jobs/mysql
datadir=/var/vcap/store/mysql
enable_sst_marker=/var/vcap/sys/run/galera-healthcheck/enable_sst
CONFIG_DIR=/etc/mysql
LOG_DIR=/var/vcap/sys/log/mysql
LOG_FILE=$LOG_DIR/mariadb_ctrl.combined.log
SERVER_AUDIT_LOG_DIR=/var/vcap/store/mysql_audit_logs
JOB_INDEX=<%= index %>
CONFIG_FILE=$MARIADB_JOB_DIR/config/mariadb_ctl_config.yml
MARIADB_CTRL_PACKAGE=/var/vcap/packages/mariadb_ctrl

MY_NAME=mariadb_ctl
RUN_DIR=/var/vcap/sys/run/$MY_NAME
PIDFILE=$RUN_DIR/$MY_NAME.pid
TMP_DIR=/var/vcap/data/mysql/tmp

<% if p('cf_mysql.mysql.disable_auto_sst') %>
export DISABLE_SST=1
<% end %>
<% if p('cf_mysql.mysql.interrupt_notify_cmd') %>
export INTERRUPT_NOTIFY_CMD="<%= p('cf_mysql.mysql.interrupt_notify_cmd') %>"
<% end %>

source /var/vcap/packages/common/utils.sh

# add mysql to path
if [ ! -f /usr/local/bin/mysql ]; then
  log "Adding mysql to path"
  ln -s /var/vcap/packages/mariadb/bin/mysql /usr/local/bin
fi

# logrotate audit logs
ln -sf /var/vcap/jobs/mysql/config/mysql_audit_logs.logrotate /etc/logrotate.d/mysql_audit_logs

# add xtrabackup to path
export PATH=$PATH:/var/vcap/packages/xtrabackup/bin

# add perl libraries to perl env
export PERL5LIB=$PERL5LIB:/var/vcap/packages/xtrabackup/lib/perl/5.18.2

ulimit -n <%= p('cf_mysql.mysql.max_open_files') %>

case $1 in

  # The start script must always exit 0 if there's a chance Maria could start successfully,
  # as if monit sees a pid for Maria but this script exited with error, it will assume
  # someone else started the process in the background.
  # This will latch the status to "Execution failed" until someone manually calls
  # monit unmonitor && monit monitor, at which point monit would find the pid and reset the status to 'running'

  start)

    if [[ ! -d "$RUN_DIR" ]]; then
      log "start script: directory $RUN_DIR does not exist, creating it now"
      mkdir -p $RUN_DIR
    fi

    if [[ ! -d "$TMP_DIR" ]]; then
      log "start script: directory $TMP_DIR does not exist, creating it now"
      mkdir -p $TMP_DIR
      chown -R vcap:vcap $TMP_DIR
    fi

    log "start script: checking for existing instance of $MY_NAME"
    set +e
    $(source /var/vcap/packages/common/utils.sh; pid_guard $PIDFILE $MY_NAME)
    pg_exit_code=$?
    log "start script: pg_exit_code: $pg_exit_code"
    if [ $pg_exit_code -eq 1 ]; then
      log "start script: $MY_NAME already running. Exiting 0 so that monit doesn't think that execution failed"
      exit 0
    fi
    set -e

    # Start syslog forwarding
    /var/vcap/packages/syslog_aggregator/setup_syslog_forwarder.sh $MARIADB_JOB_DIR/config

    date >> $LOG_FILE 2>> $LOG_FILE

    <% if_p('cf_mysql.mysql.server_audit_events') do |_| %>
    mkdir -p ${SERVER_AUDIT_LOG_DIR}
    chown vcap:vcap ${SERVER_AUDIT_LOG_DIR}
    <% end %>

    # It is surprisingly hard to get the config file location passed in
    # on the command line to the mysql.server script. This is easier.
    mkdir -p $CONFIG_DIR
    rm -f /etc/my.cnf
    rm -f $CONFIG_DIR/my.cnf
    ln -sf $MARIADB_JOB_DIR/config/my.cnf $CONFIG_DIR/my.cnf

    if test -f ${enable_sst_marker}; then
      export DISABLE_SST=0
      rm ${enable_sst_marker}
    fi

    cd $MARIADB_CTRL_PACKAGE

    log "start script: starting mariadb_ctrl..."
    $MARIADB_CTRL_PACKAGE/bin/mariadb_ctrl \
             -configPath=$CONFIG_FILE \
             2>&1 \
             | tee -a $LOG_FILE \
             | logger -p local1.error -t mariadb_ctrl &

    log "start script: completed starting mariadb_ctrl."
    ;;

  stop)
    log "stop script: stopping mariadb_ctrl..."
    mkdir -p $LOG_DIR
    date >> $LOG_FILE 2>> $LOG_FILE

    log "stop script: stopping node $JOB_INDEX" >> $LOG_FILE
    kill_and_wait $PIDFILE
    log "stop script: completed stopping mariadb_ctrl"
    ;;

  *)
    echo "Usage: mysql_ctl {start|stop}"
    ;;

esac
